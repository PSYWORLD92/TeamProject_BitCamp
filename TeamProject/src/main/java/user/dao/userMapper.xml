<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

	
<mapper namespace="userSQL">
	<select id="checkLogin" parameterType="String" resultType="user">
		select user_pwd , authority from user_table where user_id = #{log_email_input}
	</select>
  
	<select id="findEmailAddress" parameterType="String" resultType="String">
		select user_id from user_table where hp = #{phone}
	</select>

	<update id="findPwCheck" parameterType="java.util.Map">
		update user_table set user_pwd = #{pwd} where hp=#{hp} and user_id=#{user_id}
	</update>
	
	<select id="isExistUser" parameterType="java.util.Map" resultType="int">
		select count(*) from user_table where hp=#{hp} and user_id=#{user_id}
	</select>

	<!--주소록 기본주소아닌 DB 호출-->
	<select id="comeAddress" parameterType="String" resultType="userAddress">
	select * from address where user_id=#{user_id} and flag=0 order by address_id desc
	</select>
	<!--주소록 기본주소 DB 호출-->
	<select id="comeAddress1" parameterType="String" resultType="userAddress">
	select * from address where user_id=#{user_id} and flag=1
	</select>
	<!--주소 삭제-->
	<delete id="myAddressDelete" parameterType="String" >
	delete address where address_id=#{address_id}
	</delete>
	<!--주소 수정-->
	<update id="addAddressModify" parameterType="userAddress">
	update address set name=#{name} , zipcode=#{zipcode} , addr=#{addr} , addr_detail=#{addr_detail} flag=#{flag} where address_id=#{address_id}
	</update>
	<!--기본배송지 바꾸기-->
	<!-- 먼저 기본배송지였던거 아니게  -->
	<update id="changeFlag1" parameterType="String">
	update address set flag=0 where flag=1 and user_id=#{user_id}
	</update>
	<!-- 새로운 기본배송지로 설정 -->
	<update id="changeFlag" parameterType="int">
	update address set flag=1 where address_id=#{addr_id}
	</update>

	
	
	<insert id="addAddress" parameterType="userAddress">
		insert into address(address_id,user_id,name,hp,zipcode,addr,addr_detail,flag)
		values(address_seq.nextval,#{user_id},#{name},#{hp},#{zipcode},#{addr},#{addr_detail},#{flag})
	</insert>
	
	<update id="updateflag" parameterType="userAddress">
		update address set flag=0 where user_id=#{user_id}
	</update>
	
	<select id="getUserInfo" parameterType="String" resultType="user">
		select * from user_table where user_id=#{user_id}
	</select>
	
	<select id="getBuyHistory" parameterType="String" resultType="buyHistory" >
		select * from buy_history where user_id=#{user_id}
	</select>
	
	<select id="getSellHistory" parameterType="String" resultType="sellHistory" >
		select * from sell_history where user_id=#{user_id}
	</select>
	
	<select id="getBuyHistoryList" parameterType="String" resultType="buyHistory" >
		select * from buy_history where user_id=#{user_id} order by buy_date desc
	</select>
	
	<select id="getSellHistoryList" parameterType="String" resultType="sellHistory" >
		select * from sell_history where user_id=#{user_id} order by sell_date desc
	</select>
	
	<select id="getBuyItem" parameterType="String" resultType="buyHistory" >
		select * from buy_history where buy_id=#{buy_id} 
	</select>
	
	<select id="getSellItem" parameterType="String" resultType="sellHistory" >
		select * from sell_history where sell_id=#{sell_id} 
	</select>
	
	<select id="getProductImg" parameterType="Integer" resultType="productImg">
		select * from pro_image where product_id = #{product_id}
	</select>
	
	<select id="getAddress" parameterType="Integer" resultType="userAddress">
		select * from address where address_id = #{address_id}
	</select>
	
	<insert id="bookMarkInsert" parameterType="java.util.Map">
		insert into	like_pro(like_pro_id,user_id,product_id,like_pro_date)
		values(like_pro_seq.nextval,#{id},#{product_id}, sysdate)
	</insert>
	
	<delete id="bookMarkDelete" parameterType="java.util.Map">
		delete like_pro where product_id=${product_id} and user_id=#{user_id}
	</delete>
  
	<!-- 아이디 중복체크 -->
	<select id="checkId" parameterType="String" resultType="int">
		select count(*) from user_table where user_id=#{user_id}
	</select>
	<!-- 닉네임 중복체크-->
	<select id="checkNick" parameterType="String" resultType="int">
		select count(*) from user_table where nickname=#{nickname}
	</select>
	
	<!-- 휴대전화로 가입 여부 조회 -->
	<select id="signUpCheck" parameterType="String" resultType="int">
		select count(*) from user_table where hp=#{hp}
	</select>
	<!-- 네이버 회원 존재여부 -->
	<select id="checkNaver" parameterType="String" resultType="int">
		select count(*) from user_table where hp=#{hp} and sign_up_type='네이버'
	</select>
	<!-- 이메일 회원가입 -->
	<insert id="signUpWrite" parameterType="user">
		insert into user_table values(#{user_id},#{user_name},#{nickname},#{user_pwd},#{hp},#{shoesize},#{sms_allow},#{email_allow},0,1,'이메일',sysdate)
	</insert>
	<!-- 네이버 회원가입 -->
	<insert id="signUpNaver" parameterType="user">
		insert into user_table(user_id,user_name,user_pwd,hp,shoesize,sms_allow,email_allow,authority,sign_up_type,sign_up_date)
		values(#{user_id},#{user_name},#{user_pwd},#{hp},0,0,0,1,'네이버',sysdate)
	</insert>
	<!-- 네이버 로그인 -->
	<select id="loginNaver" parameterType="String" resultType="user">
		select *from user_table where user_id=#{user_id}
	</select>
	<!-- 카카오 회원 존재 -->
	<select id="checkIdKakao" parameterType="String" resultType="int">
		select count(*) from user_table where user_id=#{user_id} and sign_up_type='카카오'
	</select>
	<!-- 카카오 일단 아이디 입력 후 수정하는 방식 -->
	<insert id="writeKakao" parameterType="String">
		insert into user_table values(#{user_id},0,0,0,0,0,0,0,0,1,'카카오',sysdate)
	</insert>
	
	<!-- 회원정보수정 -->
	<update id="update" parameterType="user">
		update user_table set user_name = #{user_name}
						,nickname = #{nickname}
						,user_pwd = #{user_pwd}
						,hp = #{hp}
						,shoesize = #{shoesize}
						,sms_allow = #{sms_allow}
						,email_allow = #{email_allow}
						 where user_id=#{user_id}
	</update>
  	<!-- 메인화면 찜하기 불러오기 -->
	<select id="bookMarkGet" parameterType="java.util.Map" resultType="likePro">
		select * from like_pro where user_id=#{id}
	</select> 
	
	<!-- 상품디테일 페이지 찜하기 불러오기 -->
	<select id="bookMarkGetDetail" parameterType="java.util.Map" resultType="int">
	 select count(*) from like_pro where user_id=#{user_id} and product_id=#{product_id}
	</select>
  
	<!-- 프로필 이미지 업데이트 -->
	<update id="updateImg" parameterType="java.util.Map">
		update user_table set profile_img=#{profile_img} where user_id=#{user_id}
	</update>
	
	<!-- 프로필 이미지 삭제 -->
	<update id="deleteImg" parameterType="java.util.Map">
		update user_table set profile_img = null where user_id=#{user_id}
	</update>
	
	<select id="checkrecheckpwd" parameterType="String" resultType="user">
		select * from user_table where user_id=#{user_id}
	</select>
	
	<delete id="userdelete" parameterType="String">
		delete user_table where user_id=#{user_id}
	</delete>
	
	<select id="getLikeProductList" parameterType="java.util.Map" resultType="likepro">
		select * from like_pro where user_id=#{id}
	</select>
	
	<select id="getLikeProducts" parameterType="int" resultType="product">
		select * from product where product_id=#{product_id}
	</select>
	
	<select id="getProductAll" parameterType="int" resultType="productImg">
		select * from pro_image where product_id=#{product_id}
	</select>
</mapper>